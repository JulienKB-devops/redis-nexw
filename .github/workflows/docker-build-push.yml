name: Docker Build & Push CI/CD

on:
  workflow_dispatch:

env:
  IMAGE_NAME: optimiste/redis

jobs:

  build:
    runs-on:
      - self-hosted
      - label-1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      #- name: Build the Docker image
        #run: docker compose build

  push:
    runs-on:
      - self-hosted
      - label-2
    needs: build
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      #- name: Push the Docker image
        #run: docker push ${{ vars.DOCKERHUB_USERNAME }}/redis:3.0.1-debian

  example: 
    runs-on:
      - self-hosted
      - label-1
    needs: push
    name:  Install Cosign
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.10.0
        with:
          cosign-release: 'v2.6.0'
      - name: Check install!
        run: cosign version

      # Extract metadata (tags)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest
            type=semver,pattern={{version}}
      
      # Build et Push
      - name: Build and push to Docker Hub
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      # Signer l'image avec le digest
      - name: Sign the Docker image
        run: |
          IMAGE_DIGEST="${{ steps.build-push.outputs.digest }}"
          IMAGE_URL="${{ env.IMAGE_NAME }}@${IMAGE_DIGEST}"
          
          echo "üîè Signing image: ${IMAGE_URL}"
          cosign sign --yes ${IMAGE_URL}
          echo "‚úÖ Image signed successfully"

      - name: G√©n√©rer la paire de cl√©s Cosign
        run: |
          mkdir -p cosign-keys
          # V√©rifier si les cl√©s existent d√©j√†
          if [ -f "cosign-keys/cosign.key" ]; then
            echo "‚úÖ Cosign keys already exist, skipping generation"
          else
            echo "üîë Generating cosign key pair..."
            cosign generate-key-pair --output-key-prefix=cosign-keys/cosign
            echo "‚úÖ Cosign keys generated"
          fi

      - name: Sauvegarder la cl√© publique comme artefact
        uses: actions/upload-artifact@v4
        with:
          name: cosign-public-key
          path: cosign-keys/cosign.pub

  cleanup:
    runs-on:
      - self-hosted
      - label-1
    needs: example
    steps:
      - name: Remove the local Docker image
        run: docker rmi ${{ vars.DOCKERHUB_USERNAME }}/redis:3.0.1-debian

      - name: Verify image removal
        run: |
          if docker images | grep -q "${{ vars.DOCKERHUB_USERNAME }}/redis:redis:3.0.1-debian"; then
            echo "Image still exists locally!"
            exit 1
          else
            echo "Image successfully removed locally."
          fi

  pull:
    runs-on:
      - self-hosted
      - label-2
    needs: cleanup
    steps:
      - name: Pull the Docker image from Docker Hub
        run: docker pull ${{ vars.DOCKERHUB_USERNAME }}/redis:3.0.1-debian

      - name: List Docker images after pull
        run: docker images
